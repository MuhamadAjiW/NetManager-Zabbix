#!/bin/bash

# Must be run as root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root"
    exit 1
fi

# Global Variables
VERBOSE=1
ZABBIX_AUTH_TOKEN=""

# Validation functions
validate_ip() {
    [ $VERBOSE -eq 1 ] && echo "Validating ip..."

    local ip=$1
    if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        IFS='.' read -r -a octets <<< "$ip"
        for octet in "${octets[@]}"; do
            if ! [[ "$octet" -ge 0 && "$octet" -le 255 ]]; then
                return 1  # Invalid IP range
            fi
        done
        return 0  # Valid IP address
    else
        return 1  # Invalid IP format
    fi
}

# Parsing functions
parse_groups() {
    local ids="$1"
    local json=""

    IFS='|' read -r -a array <<< "$ids"

    for id in "${array[@]}"; do
        json+="{\"groupid\": \"$id\"},"
    done

    json="${json%,}"

    echo "[ $json ]"
}

parse_templates() {
    local ids="$1"
    local json=""

    IFS='|' read -r -a array <<< "$ids"

    for id in "${array[@]}"; do
        json+="{\"templateid\": \"$id\"},"
    done

    json="${json%,}"

    echo "[ $json ]"
}

parse_interfaces() {
    local ids="$1"
    local json=""

    IFS='|' read -r -a array <<< "$ids"

    for id in "${array[@]}"; do
        IFS=':' read -r ip port <<< "$id"
        IFS=';' read -r ip port main type useip dns snmp_version bulk comsec_name max_rep ctx_name sec_level auth_ptcl auth_pass priv_ptcl priv_pass <<< "$(grep "$ip;$port" "$NETMGR_ZABBIX_DATA_INTERFACE")"
        json+="{\"type\": $type, \"main\": $main, \"useip\": $useip, \"ip\": \"$ip\", \"dns\": \"$dns\", \"port\": \"$port\""
        
        if [ $type -eq 2 ]; then
            json+=",\"details\": {\"version\": $snmp_version, \"bulk\": $bulk"
            case "$snmp_version" in
            "1")   
                json+=",\"community\": \"$comsec_name\""
                ;;
            "2")
                json+=",\"community\": \"$comsec_name\",\"max_repetitions\": $max_rep"
                ;;
            "3")
                json+=",\"securityname\": \"$comsec_name\",\"contextname\": \"$ctx_name\""
                json+=",\"max_repetitions\": $max_rep,\"securitylevel\": $sec_level"
                case "$sec_level" in
                "0");;
                "1")
                    json+=",\"authprotocol\": $auth_ptcl,\"authpassphrase\": \"$auth_pass\""
                    ;;
                "2")
                    json+=",\"authprotocol\": $auth_ptcl,\"authpassphrase\": \"$auth_pass\""
                    json+=",\"privprotocol\": $priv_ptcl,\"privpassphrase\": \"$priv_pass\""
                    ;;
                *)  ;;
                esac
                ;;
            *)  ;;
            esac
            json+="} "
        fi
        json+="},"
    done

    json="${json%,}"

    echo "[ $json ]"
}

# Internal functions
netmgr_zabbix_login(){
    ZABBIX_AUTH_TOKEN=$(curl -s -X POST -H 'Content-Type: application/json' -d '{
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": "'$ZABBIX_USERNAME'",
            "password": "'$ZABBIX_PASSWORD'"
        },
        "id": 1,
        "auth": null
    }' $ZABBIX_SERVER_URL | jq -r '.result')

    if [ "$ZABBIX_AUTH_TOKEN" == "null" ] || [ -z "$ZABBIX_AUTH_TOKEN" ]; then
        echo "Error: Authentication failed"
        exit 1
    fi

    return 0
}

netmgr_add_host_node(){
    local hostname=$1
    local templates=$2
    local groups=$3
    local interfaces=$4
    local host_id
    local response

    local ids="$1"
    local json=""

    IFS='|' read -r -a array <<< "$interfaces"
    for id in "${array[@]}"; do
        IFS=':' read -r ip port <<< "$id"
        if ! grep -q "$ip;$port" "$NETMGR_ZABBIX_DATA_INTERFACE"; then
            echo "Error: $ip:$port not found in interface data"
            echo "Failed to add host: $hostname"
            return 1
        fi
    done

    response=$(curl -s -X POST $ZABBIX_SERVER_URL -H 'Content-Type: application/json' \
        -d '{
            "auth": "'"$ZABBIX_AUTH_TOKEN"'",
            "jsonrpc": "2.0",
            "method": "host.create",
            "params": {
                "host": "'"$hostname"'",
                "interfaces": '"$(parse_interfaces $interfaces)"',
                "groups": '"$(parse_groups $groups)"',
                "templates": '"$(parse_templates $templates)"'
            },
            "id": 1
        }')

    # Parse the response
    echo '{
            "auth": "'"$ZABBIX_AUTH_TOKEN"'",
            "jsonrpc": "2.0",
            "method": "host.create",
            "params": {
                "host": "'"$hostname"'",
                "interfaces": '"$(parse_interfaces $interfaces)"',
                "groups": '"$(parse_groups $groups)"',
                "templates": '"$(parse_templates $templates)"'
            },
            "id": 1
        }'
    echo $response
    host_id=$(echo $response | jq -r '.result.hostids[0]')

    if [ -n "$host_id" ]; then
        echo "Host added successfully with ID: $host_id"
    else
        echo "Failed to add host: $response"
    fi

    # echo '{
    #         "jsonrpc": "2.0",
    #         "method": "host.create",
    #         "params": {
    #             "host": "'"$hostname"'",
    #             "interfaces": "'"$(parse_interfaces $interfaces)"'",
    #             "groups": "'"$(parse_groups $groups)"'",
    #             "templates": "'"$(parse_templates $groups)"'"
    #         },
    #         "auth": "'"$ZABBIX_AUTH_TOKEN"'",
    #         "description": "'"$desc"'"
    #         "id": 1
    #     }'

    return 0
}

netmgr_add_host_file(){
    [ $VERBOSE -eq 1 ] && echo "Adding hosts of node from file=$1..."
    local file="$1"
    local total=0
    local success=0

    if [ ! -f "$file" ]; then
        echo "Error: File $file not found"
        exit 1
    fi

    netmgr_zabbix_login
    while IFS=';' read -r hostname templates groups interfaces; do
        if [[ -z "$hostname" || "$hostname" == "#"* ]]; then
            continue
        fi
        netmgr_add_host_node "$hostname" "$templates" "$groups" "$interfaces"
        [ $? -eq 0 ] && ((success++))
        ((total++))

    done < "$file"

    echo "Added $success/$total Nodes from $file."

    return 0
}

# Commands
func_show_help(){
        echo "
Usage: $0 [-s] [-c config]
Commands:
    add_host        Adds network appliances as host on zabbix
    show_groups     Shows all groups available and its id
    show_templates  Shows all templates available and its id

Options:
    -h              Shows this help message
    -c <config>     Specifies configuration file
    -s              Enable silent mode
"
}

func_show_groups() {
    local response

    netmgr_zabbix_login
    response=$(curl -s -X POST -H 'Content-Type: application/json' -d '{
        "auth": "'$ZABBIX_AUTH_TOKEN'",
        "jsonrpc": "2.0",
        "method": "hostgroup.get",
        "params": {
            "output": ["groupid", "name"]
        },
        "id": 2
    }' $ZABBIX_SERVER_URL)
    
    echo $response | jq -r '.result[] | "\(.groupid): \(.name)"'
}

func_show_templates() {
    local response

    netmgr_zabbix_login
    response=$(curl -s -X POST -H 'Content-Type: application/json' -d '{
        "auth": "'$ZABBIX_AUTH_TOKEN'",
        "jsonrpc": "2.0",
        "method": "template.get",
        "params": {
            "output": ["templateid", "name"]
        },
        "id": 3
    }' $ZABBIX_SERVER_URL)
    
    echo $response | jq -r '.result[] | "\(.templateid): \(.name)"'
}

func_add_host(){
    [ $VERBOSE -eq 1 ] && echo "Executing command on nodes..."

    # Set opt index
    OPTIND=2

    local ip=""
    local file=""
    local library=""
    local method=""
    local username=""
    local password=""
    local commands=""

    while getopts "h?f:" opt; do
        case "$opt" in
        h|\?)
            echo "
Usage: netmgr_zabbix add_host [-f file path]

Required:
    -f <file path>      : The path for bulk adding nodes

Example file format at ./var/netmgr_zabbix.data.example
" && exit 0;;
        f)    file=$OPTARG        ;;
        esac
    done
    shift $((OPTIND-1))

    if [ ! -z "$file" ]; then
        netmgr_add_host_file "$file"
        [ $? -ne 0 ] && exit $?

    else
        echo "Error: Missing required arguments. Use -h for help."
        exit 1
    fi

    echo "Execution complete."
}

main(){
    local config="./etc/netmgr_zabbix.conf"
    local action=""

    # Set opt index
    OPTIND=1

    while getopts "h?sc:" opt; do
        case "$opt" in
        h|\?)   func_show_help && exit 0    ;;
        s)      VERBOSE=0                   ;;
        c)      config=$OPTARG              ;;
        esac
    done
    shift $((OPTIND-1))

    # Loads config
    if [ -f "$config" ]; then
        source "$config"
    else
        echo "Error: Configuration file $config not found or is not a regular file."
        exit 1
    fi

    action="$1"

    case "$action" in
    "add_host")         func_add_host "$@"          ;;
    "show_groups")      func_show_groups            ;;
    "show_templates")   func_show_templates         ;;
    *)                  func_show_help              ;;
    esac
}

main "$@"
